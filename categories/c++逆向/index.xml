<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>C&#43;&#43;逆向 - 分类 - 夏洛魂的个人博客</title>
        <link>https://XiaLuoHun.github.io/categories/c&#43;&#43;%E9%80%86%E5%90%91/</link>
        <description>C&#43;&#43;逆向 - 分类 - 夏洛魂的个人博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1305002420@foxmail.com (夏洛魂)</managingEditor>
            <webMaster>1305002420@foxmail.com (夏洛魂)</webMaster><lastBuildDate>Tue, 15 Feb 2022 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://XiaLuoHun.github.io/categories/c&#43;&#43;%E9%80%86%E5%90%91/" rel="self" type="application/rss+xml" /><item>
    <title>x64逆向</title>
    <link>https://XiaLuoHun.github.io/posts/c&#43;&#43;%E9%80%86%E5%90%91/x64%E9%80%86%E5%90%91/</link>
    <pubDate>Tue, 15 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://XiaLuoHun.github.io/posts/c&#43;&#43;%E9%80%86%E5%90%91/x64%E9%80%86%E5%90%91/</guid>
    <description><![CDATA[x64逆向 寄存器 函数调用约定 四寄存器fast-call调用约定,调用方平栈,一般是函数开头申请栈空间,函数结尾平栈. 整型参数 前4个参数传入指]]></description>
</item><item>
    <title>x86逆向</title>
    <link>https://XiaLuoHun.github.io/posts/c&#43;&#43;%E9%80%86%E5%90%91/x86%E9%80%86%E5%90%91/</link>
    <pubDate>Mon, 14 Feb 2022 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://XiaLuoHun.github.io/posts/c&#43;&#43;%E9%80%86%E5%90%91/x86%E9%80%86%E5%90%91/</guid>
    <description><![CDATA[x86逆向 除法 约定 两个无符号相除,结果仍然是无符号. 两个有符号相除,结果是有符号. 有符号数和无符号数混除,结果是无符号的. 基本概念 在C语言和]]></description>
</item><item>
    <title>STL库学习</title>
    <link>https://XiaLuoHun.github.io/posts/c&#43;&#43;%E9%80%86%E5%90%91/stl%E5%BA%93%E5%AD%A6%E4%B9%A0/</link>
    <pubDate>Sat, 10 Oct 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://XiaLuoHun.github.io/posts/c&#43;&#43;%E9%80%86%E5%90%91/stl%E5%BA%93%E5%AD%A6%E4%B9%A0/</guid>
    <description><![CDATA[这里以VS2017 Release版本为示例: String(大小0x18) 1 2 3 4 5 6 7 8 9 10 struct string { Union _Bxty { char _Buf[16]; char* _Ptr; } size_t _Mysize; //字符串长度 size_t _Myres; //]]></description>
</item></channel>
</rss>
